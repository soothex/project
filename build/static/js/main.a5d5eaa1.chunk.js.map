{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Logger","react_default","a","createElement","Fragment","this","props","email","password","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","onChangeInputs","bind","assertThisInitialized","handleSubmit","event","setState","target","value","defineProperty","name","alert","concat","language","preventDefault","className","onSubmit","src","logo","alt","width","height","for","type","id","placeholder","required","onChange","App_Logger","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qQCIlCC,0LAEF,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,sCAAeE,KAAKC,MAAMC,OAC1BN,EAAAC,EAAAC,cAAA,qEAAgBE,KAAKC,MAAME,kBALdC,IAAMC,YAmEZC,cAvDX,SAAAA,EAAYL,GAAO,IAAAM,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAR,KAAAM,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAR,KAAAQ,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAZ,KAAMC,KACDY,MAAQ,CACXX,MAAO,GACPC,SAAU,IAKZI,EAAKO,eAAiBP,EAAKO,eAAeC,KAApBP,OAAAQ,EAAA,EAAAR,CAAAD,IACtBA,EAAKU,aAAeV,EAAKU,aAAaF,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IAVHA,6EAYLW,GACZlB,KAAKmB,SAAS,CAACjB,MAAOgB,EAAME,OAAOC,iDAEpBH,GACflB,KAAKmB,SAAS,CAAChB,SAAUe,EAAME,OAAOC,+CAEzBH,GACblB,KAAKmB,SAALX,OAAAc,EAAA,EAAAd,CAAA,GACGU,EAAME,OAAOG,KAAOL,EAAME,OAAOC,yCAI7BH,GACPM,MAAK,qFAAAC,OAAqBzB,KAAKa,MAAMa,WACrCR,EAAMS,kDAIR,OACA/B,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,QAAM8B,UAAU,cAAcC,SAAU7B,KAAK6B,UAC3CjC,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,OAAOE,IAAKC,IAAMC,IAAI,GAAGC,MAAM,KAAKC,OAAO,OAC1DtC,EAAAC,EAAAC,cAAA,MAAI8B,UAAU,8BAAd,kBACAhC,EAAAC,EAAAC,cAAA,SAAOqC,IAAI,aAAaP,UAAU,WAAlC,iBACAhC,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,QAAQC,GAAG,aAAaT,UAAU,eAAeL,KAAK,QAAQe,YAAY,gBAAgBC,UAAQ,EAACC,SAAUxC,KAAKc,iBAC9HlB,EAAAC,EAAAC,cAAA,SAAOqC,IAAI,gBAAgBP,UAAU,WAArC,YACAhC,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAWC,GAAG,gBAAgBT,UAAU,eAAeL,KAAK,WAAWe,YAAY,WAAWC,UAAQ,EAAEC,SAAUxC,KAAKc,iBACnIlB,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,iBACbhC,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SAAOsC,KAAK,WAAWf,MAAM,gBAD/B,iBAIFzB,EAAAC,EAAAC,cAAA,UAAQ8B,UAAU,mCAAmCQ,KAAK,UAA1D,WACAxC,EAAAC,EAAAC,cAAA,KAAG8B,UAAU,wBAAb,mBAGFhC,EAAAC,EAAAC,cAAC2C,EAAD,CAAQvC,MAAOF,KAAKa,MAAMX,MAAOC,SAAUH,KAAKa,MAAMV,mBAjD1CC,IAAMC,WCHJqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a5d5eaa1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass Logger extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <p>Ваш email: {this.props.email}</p>\r\n        <p>Ваш пароль: {this.props.password}</p>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        email: '',\r\n        password: ''\r\n      };\r\n\r\n      //this.onChangePassword = this.onChangePassword.bind(this);\r\n      //this.onChangeEmail = this.onChangeEmail.bind(this);\r\n      this.onChangeInputs = this.onChangeInputs.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    onChangeEmail(event) {\r\n      this.setState({email: event.target.value});\r\n    }\r\n    onChangePassword(event){\r\n      this.setState({password: event.target.value});\r\n    }\r\n    onChangeInputs(event){\r\n      this.setState({\r\n        [event.target.name]: event.target.value\r\n      })\r\n    }\r\n\r\n    onSubmit(event) {\r\n      alert(`Вы выбрали язык: ${this.state.language}`);\r\n      event.preventDefault();\r\n    }\r\n\r\n  render() {\r\n    return (\r\n    <React.Fragment>\r\n      <form className=\"form-signin\" onSubmit={this.onSubmit}>\r\n        <img className=\"mb-4\" src={logo} alt=\"\" width=\"72\" height=\"72\"/>\r\n        <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\r\n        <label for=\"inputEmail\" className=\"sr-only\">Email address</label>\r\n        <input type=\"email\" id=\"inputEmail\" className=\"form-control\" name=\"email\" placeholder=\"Email address\" required onChange={this.onChangeInputs} />\r\n        <label for=\"inputPassword\" className=\"sr-only\">Password</label>\r\n        <input type=\"password\" id=\"inputPassword\" className=\"form-control\" name=\"password\" placeholder=\"Password\" required  onChange={this.onChangeInputs} />\r\n        <div className=\"checkbox mb-3\">\r\n          <label>\r\n            <input type=\"checkbox\" value=\"remember-me\" /> Remember me\r\n          </label>\r\n        </div>\r\n        <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Sign in</button>\r\n        <p className=\"mt-5 mb-3 text-muted\">&copy; 2017-2019</p>\r\n      </form>\r\n      \r\n      <Logger email={this.state.email} password={this.state.password}/>\r\n    </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}