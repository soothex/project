{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SayCheck","props","checkbox","react_default","a","createElement","className","Logger","Fragment","this","email","password","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","registration","onChangeInputs","bind","assertThisInitialized","onSubmit","event","target","type","setState","defineProperty","name","checked","value","preventDefault","src","logo","alt","width","height","switch","for","id","placeholder","required","onChange","App_Logger","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","unregister"],"mappings":"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","file":"static/js/main.8b111e1b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\n\r\nfunction SayCheck(props) {\r\n  if(props.checkbox) {\r\n    return <h1 className=\"h3 mb-3 font-weight-normal\">Sign Up</h1>;\r\n  }\r\n  if(!props.checkbox){\r\n    return <h1 className=\"h3 mb-3 font-weight-normal\">Please Log In</h1>;\r\n  }\r\n}\r\n\r\nfunction h1Switcher(props){\r\n  if(props.switch) {\r\n    return <p>Вы вас запомнить.</p>;\r\n  }\r\n  else\r\n  if(!props.checkbox){\r\n    return <p>Вы просили не запоминать вас.</p>;\r\n  }\r\n}\r\n\r\nclass Logger extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <p>Ваш email: {this.props.email}</p>\r\n        <p>Ваш пароль: {this.props.password}</p>\r\n        <SayCheck checkbox={this.props.checkbox} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        email: '',\r\n        password: '',\r\n        checkbox: false,\r\n        registration: false\r\n      };\r\n\r\n      this.onChangeInputs = this.onChangeInputs.bind(this);\r\n      this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onChangeInputs(event){\r\n      if(event.target.type === 'checkbox'){\r\n        this.setState({\r\n          [event.target.name]: event.target.checked}\r\n        );\r\n      }\r\n      else{\r\n        this.setState({\r\n          [event.target.name]: event.target.value\r\n        });\r\n      }\r\n    }\r\n    onSubmit(event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n  render() {\r\n    return (\r\n    <React.Fragment>\r\n      <form className=\"form-signin\" onSubmit={this.onSubmit}>\r\n        <img className=\"mb-4\" src={logo} alt=\"\" width=\"72\" height=\"72\"/>\r\n        <h1Switcher switch={this.state.registration}/>\r\n        <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\r\n        <label for=\"inputEmail\" className=\"sr-only\">Email address</label>\r\n        <input type=\"email\" id=\"inputEmail\" className=\"form-control\" placeholder=\"Email address\" required name=\"email\" onChange={this.onChangeInputs} />\r\n        <label for=\"inputPassword\" className=\"sr-only\">Password</label>\r\n        <input type=\"password\" id=\"inputPassword\" className=\"form-control\" placeholder=\"Password\" required name=\"password\" onChange={this.onChangeInputs} />\r\n        <div className=\"checkbox mb-3\">\r\n          <label>\r\n            <input type=\"checkbox\" name=\"checkbox\" onChange={this.onChangeInputs}/> Remember me\r\n          </label>\r\n        </div>\r\n        <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Sign in</button>\r\n        <p className=\"mt-5 mb-3 text-muted\">&copy; 2017-2019</p>\r\n      </form>\r\n      \r\n      <Logger email={this.state.email} password={this.state.password} checkbox={this.state.checkbox}/>\r\n    </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}